#include "RooPolynomial.h"
#include "RooGaussian.h"
#include "RooExponential.h"
#include "RooLandau.h"
#include "RooRealVar.h"
#include "RooArgList.h"
#include "RooArgSet.h"
#include "RooFFTConvPdf.h"
#include "RooPlot.h"
#include "TCanvas.h"
#include "RooProdPdf.h"
#include "RooExtendPdf.h"
#include "string"
#include "TFile.h"
#include "TH1F.h"
#include "RooAbsReal.h"
#include "RooDataHist.h"
#include "TChain.h"
#include "TTree.h"
#include "RooDataSet.h"
#include "RooAddPdf.h"
#include "RooRealConstant.h"
#include "RooCategory.h"
#include "RooSimultaneous.h"
#include "RooWorkspace.h"
#include "RooFitResult.h"
#include "RooHistPdf.h"
#include "RooCBCrujffPdf.h"
#include "RooCBmyCrujff.h"
#include "RooCBtest.h"
#include "RooCBShape.h"

using namespace RooFit;

void fitDebug_HistPdf(string cut, string filename){
 
  TChain mc("finalTree");
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/G_Pt-120to170_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/G_Pt-170to300_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/G_Pt-30to50_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/G_Pt-50to80_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/G_Pt-80to120_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/QCDEM_Pt_170_250_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/QCDEM_Pt_20_30_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/QCDEM_Pt_250_350_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/QCDEM_Pt_30_80_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/QCDEM_Pt_350_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  mc.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/QCDEM_Pt_80_170_8TeV_pythia6_hltcut30_hltiso0_mvaWP4.root");
  
  RooRealVar combinedPfIso03Phot("combinedPfIso03Phot", "combinedPfIso03Phot", -7., 15.);
  RooRealVar etaPhot("etaPhot", "etaPhot", -2.5, 2.5);
  RooRealVar mvaIdPhot("mvaIdPhot", "mvaIdPhot", -1.,1.);
  RooRealVar isMatchedPhot("isMatchedPhot","isMatchedPhot", -1., 2.);
  RooRealVar ptPhot("ptPhot", "ptPhot", 0., 1000.);
  RooRealVar weight("weight","weight", 0., 100.);

  RooArgSet argSet("argSet");

  argSet.add(combinedPfIso03Phot);
  argSet.add(etaPhot);
  argSet.add(mvaIdPhot);
  argSet.add(isMatchedPhot);
  argSet.add(ptPhot);
  argSet.add(weight);

  combinedPfIso03Phot.setBins(121);
  etaPhot.setBins(120);
  mvaIdPhot.setBins(180);
  isMatchedPhot.setBins(3);
  ptPhot.setBins(1200);
  weight.setBins(1000);

  std::cout<<"set binning"<<std::endl;

  RooDataSet allSet("allSet", "allSet", argSet, RooFit::WeightVar("weight"), RooFit::Import(mc));

  std::cout<<"created complete dataset"<<endl;

  std::cout<<allSet.GetName()<<std::endl;

  RooDataSet* d_sig_s = (RooDataSet*)allSet.reduce((cut+" && isMatchedPhot==1 && mvaIdPhot>0.711099").c_str());
  d_sig_s->SetName("d_sig_s");
  RooDataSet* d_sig_r = (RooDataSet*)allSet.reduce((cut+" && isMatchedPhot==1 && mvaIdPhot<0.711099").c_str());
  d_sig_r->SetName("d_sig_r");
  std::cout<<"d_sig_s entries: "<<d_sig_s->sumEntries()<<std::endl;
  std::cout<<"d_sig_r entries: "<<d_sig_r->sumEntries()<<std::endl;
  RooDataSet* d_bg_s = (RooDataSet*)allSet.reduce((cut+" && isMatchedPhot==0 && mvaIdPhot>0.711099").c_str());
  d_bg_s->SetName("d_bg_s");
  RooDataSet* d_bg_r = (RooDataSet*)allSet.reduce((cut+" && isMatchedPhot==0 && mvaIdPhot<0.711099").c_str());
  d_bg_r->SetName("d_bg_r");
  std::cout<<"d_bg_s entries: "<<d_bg_s->sumEntries()<<std::endl;
  std::cout<<"d_bg_r entries: "<<d_bg_r->sumEntries()<<std::endl;
  std::cout<<"created reduced dataset"<<std::endl;

  TH1F* h_set_sig_s = (TH1F*)d_sig_s->createHistogram("h_set_sig_s", combinedPfIso03Phot, RooFit::Binning(combinedPfIso03Phot.getBinning()));
  std::cout<<"integral h_set_sig_s"<<h_set_sig_s->Integral()<<std::endl;

  TH1F* h_set_sig_r = (TH1F*)d_sig_r->createHistogram("h_set_sig_r", combinedPfIso03Phot, RooFit::Binning(combinedPfIso03Phot.getBinning()));
  std::cout<<"integral h_set_sig_r"<<h_set_sig_r->Integral()<<std::endl;

  TH1F* h_set_bg_s = (TH1F*)d_bg_s->createHistogram("h_set_bg_s", combinedPfIso03Phot, RooFit::Binning(combinedPfIso03Phot.getBinning()));
  std::cout<<"integral h_set_bg_s"<<h_set_bg_s->Integral()<<std::endl;

  TH1F* h_set_bg_r = (TH1F*)d_bg_r->createHistogram("h_set_bg_r", combinedPfIso03Phot, RooFit::Binning(combinedPfIso03Phot.getBinning()));
  std::cout<<"integral h_set_bg_r"<<h_set_bg_r->Integral()<<std::endl;

  RooDataHist dh_sig_s("dh_sig_s", "dh_sig_s", combinedPfIso03Phot, Import(*h_set_sig_s));
  std::cout<<dh_sig_s.sum(kTRUE)<<std::endl;
  std::cout<<"created reduced datahist, sig scut"<<std::endl;

  RooDataHist dh_sig_r("dh_sig_r", "dh_sig_r", combinedPfIso03Phot, Import(*h_set_sig_r));
  std::cout<<dh_sig_r.sum(kTRUE)<<std::endl;
  std::cout<<"created reduced datahist, sig rcut"<<std::endl;


  RooDataHist dh_bg_s("dh_bg_s", "dh_bg_s", combinedPfIso03Phot, Import(*h_set_bg_s));
  std::cout<<dh_bg_s.sum(kTRUE)<<std::endl;
  std::cout<<"created reduced datahist, bg scut"<<std::endl;

  RooDataHist dh_bg_r("dh_bg_r", "dh_bg_r", combinedPfIso03Phot, Import(*h_set_bg_r));
  std::cout<<dh_bg_r.sum(kTRUE)<<std::endl;
  std::cout<<"created reduced datahist, bg rcut"<<std::endl;


  RooHistPdf model_sig_scut("model_sig_scut", "model_sig_scut", combinedPfIso03Phot, dh_sig_s, 2);
  RooHistPdf model_sig_rcut("model_sig_rcut", "model_sig_rcut", combinedPfIso03Phot, dh_sig_r, 2);

  RooHistPdf model_bg_scut("model_bg_scut", "model_bg_scut", combinedPfIso03Phot, dh_bg_s, 2);
  RooHistPdf model_bg_rcut("model_bg_rcut", "model_bg_rcut", combinedPfIso03Phot, dh_bg_r, 2);

  //models from fitted MC
  TFile* f_ws_sig = new TFile("workspace_fit_EB_sig_WP095_CBCrujff_pt40_65.root", "READ");
  TFile* f_ws_bg = new TFile("workspace_fit_EB_bg_WP095_pt40_65.root", "READ");

  RooWorkspace* w_sig =(RooWorkspace*)f_ws_sig->Get("w_sig");
  RooWorkspace* w_bg =(RooWorkspace*)f_ws_bg->Get("w_bg");
  
  //model for signal                                                                                                                                                                                         
  RooRealVar* CBC_mean    = (RooRealVar*)w_sig->var("CBC_mean");
  RooRealVar* CBC_sigma   = (RooRealVar*)w_sig->var("CBC_sigma");
  RooRealVar* CBC_alphaC  = (RooRealVar*)w_sig->var("CBC_alphaC");
  RooRealVar* CBC_alphaCB = (RooRealVar*)w_sig->var("CBC_alphaCB");
  RooRealVar* CBC_n       = (RooRealVar*)w_sig->var("CBC_n");

  RooCBmyCrujff* model_sig = (RooCBmyCrujff*)w_sig->pdf("CBmyCrujff_s");
  
  CBC_mean->setConstant(kTRUE);
  CBC_sigma->setConstant(kTRUE);
  CBC_alphaC->setConstant(kTRUE);
  CBC_alphaCB->setConstant(kTRUE);
  CBC_n->setConstant(kTRUE);
 
      
  //model for background

  RooRealVar* cbmean    = (RooRealVar*)w_bg->var("cbmean");
  RooRealVar* cbsigma   = (RooRealVar*)w_bg->var("cbsigma");  
  RooRealVar* cbalpha_s = (RooRealVar*)w_bg->var("cbalpha_s");  
  RooRealVar* cbn_s     = (RooRealVar*)w_bg->var("cbn_s");  
  RooRealVar* frac_s    = (RooRealVar*)w_bg->var("frac_s");  
  RooRealVar* gaussmean    = (RooRealVar*)w_bg->var("gaussmean");  
  RooRealVar* gausssigma   = (RooRealVar*)w_bg->var("gausssigma");  


  RooSimultaneous* simPdf = (RooSimultaneous*)w_bg->pdf("simPdf");
  RooAddPdf* model_bg = (RooAddPdf*)simPdf->getPdf("scut");

  cbmean->setConstant(kTRUE);      
  cbsigma->setConstant(kTRUE);     
   cbalpha_s->setConstant(kTRUE);   
   cbn_s->setConstant(kTRUE);       
  frac_s->setConstant(kTRUE);      
  gaussmean->setConstant(kTRUE);      
  gausssigma->setConstant(kTRUE);     


  TChain data("finalTree");

  data.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/Photon-Run2012A-recover-06Aug2012_hltcut30_hltiso0_mvaWP4.root");
  data.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/Photon_Run2012B-13Jul2012_hltcut30_hltiso0_mvaWP4.root");
  data.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/Photon_Run2012C-24Aug2012_hltcut30_hltiso0_mvaWP4.root");
  data.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/Photon_Run2012C-EcalRecover_11Dec2012_hltcut30_hltiso0_mvaWP4.root");
  data.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/Photon_Run2012C-PromptReco-v2_hltcut30_hltiso0_mvaWP4.root");
  data.Add("root://pccmsrm27.cern.ch///cms/local/vtavolar/GammaJets/output_newPreselLooseIso2/Photon_Run2012D-PromptReco-v1_hltcut30_hltiso0_mvaWP4.root");

  RooDataSet allData("allData", "allData", argSet, RooFit::WeightVar("weight"), RooFit::Import(data));

  std::cout<<"created complete dataset for data"<<endl;
  
  std::cout<<allData.GetName()<<std::endl;
  
  RooDataSet* data_scut = (RooDataSet*)allData.reduce((cut+" && mvaIdPhot>0.711099").c_str());
  RooDataSet* data_rcut = (RooDataSet*)allData.reduce((cut+" && mvaIdPhot<0.711099").c_str());
  std::cout<<"data_scut entries: "<<data_scut->sumEntries()<<std::endl;
  std::cout<<"data_rcut entries: "<<data_rcut->sumEntries()<<std::endl;
  std::cout<<"created reduced dataset"<<std::endl;

  TH1F* h_set_scut = (TH1F*)data_scut->createHistogram("h_set_scut", combinedPfIso03Phot, RooFit::Binning(combinedPfIso03Phot.getBinning()));
  TH1F* h_set_rcut = (TH1F*)data_rcut->createHistogram("h_set_rcut", combinedPfIso03Phot, RooFit::Binning(combinedPfIso03Phot.getBinning()));

  RooDataHist datah_scut("datah_scut", "datah_scut", combinedPfIso03Phot, Import(*h_set_scut));
  RooDataHist datah_rcut("datah_rcut", "datah_rcut", combinedPfIso03Phot, Import(*h_set_rcut));

  //alternative simple sig models for debugging
  RooRealVar g_mean_d("g_mean_d", "g_mean_d", -0.9, -2., 0.);
  RooRealVar g_sigma_d("g_sigma_d", "g_sigma_d", 1., 0., 5.);
  RooGaussian gauss_d("gauss_d", "gauss_d", combinedPfIso03Phot, g_mean_d, g_sigma_d);

  RooRealVar cb_mean_d("cb_mean_d", "cb_mean_d", -0.9, -2., 0.);
  RooRealVar cb_sigma_d("cb_sigma_d", "cb_sigma_d", 1., 0., 5.);
  RooRealVar cb_alpha_d("cb_alpha_d", "cb_alpha_d", -0.922, -0.922, -0.922);
  RooRealVar cb_n_d("cb_n_d", "cb_n_d", 4.77, 4.77, 4.77);
  RooCBShape cb_d("cb_d", "cb_d", combinedPfIso03Phot, cb_mean_d, cb_sigma_d, cb_alpha_d, cb_n_d);
  RooCBtest cb_test_d("cb_test_d", "cb_test_d", combinedPfIso03Phot, cb_mean_d, cb_sigma_d, cb_alpha_d, cb_n_d);


  RooRealVar cbc_mean_d("cbc_mean_d", "cbc_mean_d", -0.9, -2., 0.);
  RooRealVar cbc_sigma_d("cbc_sigma_d", "cbc_sigma_d", 1., 0., 5.);
  RooRealVar cbc_alphaC_d("cbc_alphaC_d", "cbc_alphaC_d", 0.2, 0., 5.);
  RooRealVar cbc_alphaCB_d("cbc_alphaCB_d", "cbc_alphaCB_d", 0.922, 0.922, 0.922);
  RooRealVar cbc_n_d("cbc_n_d", "cbc_n_d", 4.77, 4.77, 4.77);
  RooCBCrujffPdf cbc_d("cbc_d", "cbc_d", combinedPfIso03Phot, cbc_mean_d, cbc_sigma_d, cbc_alphaC_d, cbc_alphaCB_d, cbc_n_d);
  RooCBmyCrujff cbmyc_d("cbc_d", "cbc_d", combinedPfIso03Phot, cbc_mean_d, cbc_sigma_d, cbc_alphaC_d, cbc_alphaCB_d, cbc_n_d);

  RooPlot* frame = combinedPfIso03Phot.frame(RooFit::Title("Drawing new functions"));
  
  cbmyc_d.plotOn(frame, Name("prova"), LineColor(kMagenta));
  TCanvas* prova = new TCanvas();
  frame->Draw();
  prova->SaveAs("prova_CBmyC.png");
  

  //adding and extending models                                                                                                                                                                           
  //option 1: adding sig and bg and extending their sum                                                                                                                                                    
  RooRealVar frac_scut("frac_scut", "frac_scut", 0.534, 0., 1.);                                                                                                                                         
  //RooAddPdf model_scut("model_scut", "model_scut", model_sig_scut, model_bg_scut, frac_scut);//using only rooHistPdfs
  //  RooAddPdf model_scut("model_scut", "model_scut", *model_sig, model_bg_scut, frac_scut);//using CBCrujff for signal
  RooAddPdf model_scut("model_scut", "model_scut", *model_sig, *model_bg, frac_scut);//using fit templates from MC
  //RooAddPdf model_scut("model_scut", "model_scut", gauss_d, model_bg_scut, frac_scut);//using floating guassian for signal
  //  RooAddPdf model_scut("model_scut", "model_scut", cb_d, model_bg_scut, frac_scut);//using floating cbshape for signal
  //  RooAddPdf model_scut("model_scut", "model_scut", cb_test_d, model_bg_scut, frac_scut);//using MY floating cbshape for signal
  //    RooAddPdf model_scut("model_scut", "model_scut", cbc_d, model_bg_scut, frac_scut);//using floating CrystalBallCrujff for signal
  //RooAddPdf model_scut("model_scut", "model_scut", cbmyc_d, model_bg_scut, frac_scut);//using floating CrystalBallCrujff for signal
  RooRealVar N_scut("N_scut", "expected number of ev for scut", 250000., 0., 100000000.);
  RooExtendPdf ext_model_scut("ext_model_scut", "ext_model_scut", model_scut, N_scut);
   //option 2: extending separately sig and bg and then adding them together
  /*  RooRealVar N_sig("N_sig", "expected number of ev for signal", 14000., 10., 100000000.);
  RooRealVar N_bg("N_bg", "expected number of ev for background", 14000., 10., 100000000.);
  RooAddPdf ext_model_scut("ext_model_scut", "ext_model_scut", RooArgList(model_sig_scut, model_bg_scut), RooArgList(N_sig, N_bg));
  */

  RooFitResult* result = ext_model_scut.fitTo(*data_scut, Save(), Range(-5.,15.), Extended(kTRUE), SumW2Error(kTRUE));
  //RooFitResult* result = cbmyc_d.fitTo(datah_scut, Save(), Range(-5.,15.), SumW2Error(kTRUE));

  RooPlot* frame_s = combinedPfIso03Phot.frame(RooFit::Title("Fit to combinedPfIso03Phot, scut region"));

  data_scut->plotOn(frame_s, Name("dh_s"));
  ext_model_scut.plotOn(frame_s, Name("pdf_scut"), LineColor(kCyan)/*, Normalization(1.0,RooAbsReal::RelativeExpected)*/);
  //  model_sig_scut.plotOn(frame_s, Name("pdf_sig"), LineColor(kMagenta), Normalization(frac_scut.getVal()));
  model_sig->plotOn(frame_s, Name("pdf_sig"), LineColor(kMagenta), Normalization(frac_scut.getVal()));
  //  gauss_d.plotOn(frame_s, Name("pdf_sig"), LineColor(kMagenta), Normalization(frac_scut.getVal()));
  //  cb_d.plotOn(frame_s, Name("pdf_sig"), LineColor(kMagenta), Normalization(frac_scut.getVal()));
  //  cb_test_d.plotOn(frame_s, Name("pdf_sig"), LineColor(kMagenta), Normalization(frac_scut.getVal()));
  //cbc_d.plotOn(frame_s, Name("pdf_sig"), LineColor(kMagenta), Normalization(frac_scut.getVal()));
  //cbmyc_d.plotOn(frame_s, Name("pdf_sig"), LineColor(kMagenta), Normalization(frac_scut.getVal()));
  //model_bg_scut.plotOn(frame_s, Name("pdf_bg"), LineColor(kMagenta), Normalization((1-frac_scut.getVal())) );
  model_bg->plotOn(frame_s, Name("pdf_bg"), LineColor(kMagenta), Normalization(frac_scut.getVal()));
  
  frame_s->SetMinimum(0.00001);
  //  frame->SetMaximum(30000.);

  TCanvas* c = new TCanvas();
  c->SetTitle(frame_s->GetTitle());
  frame_s->Draw("");
  c->SaveAs((filename+"_s.png").c_str());
  c->SaveAs((filename+"_s.root").c_str());

  Double_t chi2 = frame_s->chiSquare("pdf_scut", "dh_s", 2);

  std::cout<<"ChiSquared value, scut: "<<chi2<<std::endl;

  c->SetLogy();
  c->SetTitle(frame_s->GetTitle());
  frame_s->Draw("");
  c->SaveAs((filename+"_s_log.png").c_str());
  c->SaveAs((filename+"_s_log.root").c_str());

  TFile* f_fitRes = new TFile(("fitResult_"+filename+".root").c_str(), "RECREATE");
  result->Write();
  //  f_fitRes->Write();
  f_fitRes->Close();
  /*  RooWorkspace* w_bg = new RooWorkspace("w_bg", "workspace");

  w_bg->import(srcut);
  w_bg->import(simPdf);
  w_bg->import(combinedPfIso03Phot);

  w_bg->Print();

  w_bg->writeToFile(("workspace_"+filename+".root").c_str());
  */
}
